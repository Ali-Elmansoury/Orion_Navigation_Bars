package com.ities45.orion_navigation_bars

import android.Manifest
import android.annotation.SuppressLint
import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.content.pm.PackageManager
import android.os.Build
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.provider.Settings
import android.view.View
import android.view.WindowManager
import android.widget.ArrayAdapter
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import com.google.android.material.snackbar.Snackbar
import com.ities45.orion_navigation_bars.databinding.ActivityMainBinding

class MainActivity : AppCompatActivity() {

    companion object {
        private const val REQUEST_BLUETOOTH_PERMISSION = 1
    }

    private lateinit var binding: ActivityMainBinding

    private val discoveredDevices = mutableListOf<BluetoothDevice>()
    private val deviceNames = mutableListOf<String>()
    private var receiver: BroadcastReceiver? = null
    private var scanningDialog: AlertDialog? = null

    private var scanningAdapter: ArrayAdapter<String>? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        hideSystemBars()
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        with(binding.customToolbar) {
            setWifiIcon(R.drawable.wifi)
            setBluetoothIcon(R.drawable.bluetooth)
            setDrowsinessIcon(R.drawable.eye)
            setSettingsIcon(R.drawable.setting)

            setWifiIconClickListener {
                startActivity(Intent(Settings.ACTION_WIFI_SETTINGS))
                showSnackbar("WiFi icon clicked")
            }

            setBluetoothIconClickListener {
                requestBluetoothPermission()
            }

            setDrowsinessIconClickListener {
                showSnackbar("Drowsiness icon clicked")
            }

            setSettingsIconClickListener {
                showSnackbar("Settings icon clicked")
            }
        }
    }

    private fun showSnackbar(message: String) {
        Snackbar.make(binding.root, message, Snackbar.LENGTH_SHORT).show()
    }

    private fun hideSystemBars() {
        window.decorView.systemUiVisibility =
            (View.SYSTEM_UI_FLAG_FULLSCREEN
                    or View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
                    or View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY
                    or View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                    or View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                    or View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN)

        window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)
        window.statusBarColor = android.graphics.Color.TRANSPARENT
        window.navigationBarColor = android.graphics.Color.TRANSPARENT

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            window.setDecorFitsSystemWindows(false)
            val controller = window.insetsController
            controller?.hide(android.view.WindowInsets.Type.systemBars())
            controller?.systemBarsBehavior =
                android.view.WindowInsetsController.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE
        }
    }

    /** ✅ Safe registration */
    private fun registerReceiver() {
        if (receiver != null) return // Prevent duplicate registration

        val newReceiver = object : BroadcastReceiver() {
            override fun onReceive(context: Context, intent: Intent) {
                when (intent.action) {
                    BluetoothDevice.ACTION_FOUND -> {
                        val device = intent.getParcelableExtra<BluetoothDevice>(BluetoothDevice.EXTRA_DEVICE)
                        if (device != null && !discoveredDevices.contains(device)) {
                            discoveredDevices.add(device)
                            val name = if (ActivityCompat.checkSelfPermission(
                                    this@MainActivity,
                                    Manifest.permission.BLUETOOTH_CONNECT
                                ) == PackageManager.PERMISSION_GRANTED
                            ) {
                                device.name ?: device.address
                            } else {
                                device.address // fallback if CONNECT not granted
                            }
                            deviceNames.add(name)

                            runOnUiThread {
                                scanningAdapter?.notifyDataSetChanged() // ✅ FIXED
                            }
                        }
                    }

                    BluetoothAdapter.ACTION_DISCOVERY_FINISHED -> {
                        runOnUiThread {
                            scanningDialog?.setMessage("Scan finished.")
                            Handler(Looper.getMainLooper()).postDelayed({
                                if (scanningDialog?.isShowing == true && deviceNames.isEmpty()) {
                                    scanningDialog?.setMessage("No devices found.")
                                }
                            }, 2000)
                        }
                    }
                }
            }
        }

        receiver = newReceiver
        val filter = IntentFilter().apply {
            addAction(BluetoothDevice.ACTION_FOUND)
            addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED)
        }
        registerReceiver(newReceiver, filter)
    }

    private fun unregisterReceiverSafely() {
        receiver?.let {
            try {
                unregisterReceiver(it)
            } catch (_: Exception) {
            }
        }
        receiver = null
    }

//    private fun showScanningDialog() {
//        scanningAdapter = ArrayAdapter(this, android.R.layout.simple_list_item_1, deviceNames)
//
//        val builder = AlertDialog.Builder(this)
//            .setTitle("Available Bluetooth Devices")
//            .setAdapter(scanningAdapter) { _, which ->
//                val selectedDevice = discoveredDevices.getOrNull(which)
//                scanningDialog?.dismiss()
//                if (selectedDevice != null) {
//                    initiatePairing(selectedDevice)
//                } else {
//                    showSnackbar("Unable to select device.")
//                }
//            }
//            .setNegativeButton("Cancel") { _, _ ->
//                if (Build.VERSION.SDK_INT < Build.VERSION_CODES.S ||
//                    ActivityCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_SCAN) == PackageManager.PERMISSION_GRANTED
//                ) {
//                    BluetoothAdapter.getDefaultAdapter()?.cancelDiscovery()
//                }
//                scanningDialog?.dismiss()
//            }
//
//        scanningDialog = builder.create()
//        scanningDialog?.setOnDismissListener {
//            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.S ||
//                ActivityCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_SCAN) == PackageManager.PERMISSION_GRANTED
//            ) {
//                BluetoothAdapter.getDefaultAdapter()?.cancelDiscovery()
//            }
//            scanningDialog = null
//        }
//        scanningDialog?.show()
//    }

    @SuppressLint("MissingPermission")
    private fun showScanningDialog() {
        val builder = AlertDialog.Builder(this)
        builder.setTitle("Select a device")

        val deviceList = ArrayList<String>()
        val adapter = ArrayAdapter(this, android.R.layout.simple_list_item_1, deviceList)

        builder.setAdapter(adapter) { dialog, which ->
            val deviceName = deviceList[which]
            showSnackbar("Selected: $deviceName")
            // TODO: handle selection (connect or simulate)
        }

        builder.setNegativeButton("Cancel") { _, _ ->
            cancelDiscoverySafe()
            scanningDialog?.dismiss()
        }

        scanningDialog = builder.create()
        scanningDialog?.setOnDismissListener {
            cancelDiscoverySafe()
            scanningDialog = null
        }

        scanningDialog?.show()

        val bluetoothAdapter = BluetoothAdapter.getDefaultAdapter()

        if (bluetoothAdapter != null && bluetoothAdapter.isEnabled) {
            try {
                // On real device → list bonded devices
                val bondedDevices = bluetoothAdapter.bondedDevices
                if (bondedDevices.isNotEmpty()) {
                    bondedDevices.forEach { device ->
                        deviceList.add("${device.name} (${device.address})")
                    }
                } else {
                    deviceList.add("No paired devices found")
                }
            } catch (e: SecurityException) {
                deviceList.add("Missing Bluetooth permission")
            }
        } else {
            // Emulator fallback
            deviceList.addAll(
                listOf(
                    "Simulated OBD-II Device",
                    "Simulated Phone",
                    "Simulated Speaker"
                )
            )
        }
        adapter.notifyDataSetChanged()
    }

    private fun cancelDiscoverySafe() {
        val bluetoothAdapter = BluetoothAdapter.getDefaultAdapter()
        if (bluetoothAdapter != null &&
            (Build.VERSION.SDK_INT < Build.VERSION_CODES.S ||
                    ActivityCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_SCAN) == PackageManager.PERMISSION_GRANTED)
        ) {
            bluetoothAdapter.cancelDiscovery()
        }
    }


    /** ✅ Request correct permissions */
    private fun requestBluetoothPermission() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            val needed = mutableListOf<String>()
            if (ContextCompat.checkSelfPermission(
                    this,
                    Manifest.permission.BLUETOOTH_CONNECT
                ) != PackageManager.PERMISSION_GRANTED
            ) {
                needed.add(Manifest.permission.BLUETOOTH_CONNECT)
            }
            if (ContextCompat.checkSelfPermission(
                    this,
                    Manifest.permission.BLUETOOTH_SCAN
                ) != PackageManager.PERMISSION_GRANTED
            ) {
                needed.add(Manifest.permission.BLUETOOTH_SCAN)
            }
            if (needed.isNotEmpty()) {
                ActivityCompat.requestPermissions(this, needed.toTypedArray(), REQUEST_BLUETOOTH_PERMISSION)
                return
            }
        }
        showPairedDevices()
    }

    /** ✅ Safe discovery */
    private fun startBluetoothDiscovery() {
        val bluetoothAdapter = BluetoothAdapter.getDefaultAdapter() ?: run {
            showSnackbar("Bluetooth adapter not available.")
            return
        }

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_SCAN)
                != PackageManager.PERMISSION_GRANTED
            ) {
                showSnackbar("Missing Bluetooth scan permission.")
                requestBluetoothPermission()
                return
            }
        }

        discoveredDevices.clear()
        deviceNames.clear()
        unregisterReceiverSafely()
        registerReceiver()

        if (bluetoothAdapter.isDiscovering) bluetoothAdapter.cancelDiscovery()
        if (bluetoothAdapter.startDiscovery()) {
            showScanningDialog()
        } else {
            showSnackbar("Failed to start Bluetooth discovery.")
        }
    }

    private fun showPairedDevices() {
        val bluetoothAdapter = BluetoothAdapter.getDefaultAdapter() ?: return
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S &&
            ActivityCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_CONNECT)
            != PackageManager.PERMISSION_GRANTED
        ) {
            requestBluetoothPermission()
            return
        }

        val pairedDevices = bluetoothAdapter.bondedDevices
        if (pairedDevices.isNullOrEmpty()) {
            startBluetoothDiscovery()
        } else {
            val names = pairedDevices.map { it.name ?: it.address }.toTypedArray()
            showDeviceDialog(names, pairedDevices.toList())
        }
    }

    private fun showDeviceDialog(names: Array<String>, devices: List<BluetoothDevice>) {
        AlertDialog.Builder(this)
            .setTitle("Select Paired Device")
            .setItems(names) { _, which ->
                val selectedDevice = devices.getOrNull(which)
                if (selectedDevice != null) {
                    initiatePairing(selectedDevice)
                } else {
                    showSnackbar("Invalid device selected.")
                }
            }
            .setNegativeButton("Cancel", null)
            .show()
    }

    private fun initiatePairing(device: BluetoothDevice) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S &&
            ActivityCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_CONNECT)
            != PackageManager.PERMISSION_GRANTED
        ) {
            requestBluetoothPermission()
            return
        }

        if (device.bondState == BluetoothDevice.BOND_NONE) {
            device.createBond()
            showSnackbar("Pairing with ${device.name ?: device.address}")
        } else {
            showSnackbar("Already paired: ${device.name ?: device.address}")
        }
    }

    override fun onRequestPermissionsResult(
        requestCode: Int, permissions: Array<out String>, grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == REQUEST_BLUETOOTH_PERMISSION) {
            if (grantResults.all { it == PackageManager.PERMISSION_GRANTED }) {
                showPairedDevices()
            } else {
                showSnackbar("Bluetooth permissions denied.")
            }
        }
    }

    override fun onWindowFocusChanged(hasFocus: Boolean) {
        super.onWindowFocusChanged(hasFocus)
        if (hasFocus) hideSystemBars()
    }

    override fun onResume() {
        super.onResume()
        hideSystemBars()
    }

    override fun onDestroy() {
        super.onDestroy()
        unregisterReceiverSafely()
    }
}
